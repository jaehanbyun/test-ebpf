// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadPortFilter returns the embedded CollectionSpec for PortFilter.
func LoadPortFilter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PortFilterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load PortFilter: %w", err)
	}

	return spec, err
}

// LoadPortFilterObjects loads PortFilter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*PortFilterObjects
//	*PortFilterPrograms
//	*PortFilterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadPortFilterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadPortFilter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// PortFilterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PortFilterSpecs struct {
	PortFilterProgramSpecs
	PortFilterMapSpecs
	PortFilterVariableSpecs
}

// PortFilterProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PortFilterProgramSpecs struct {
	XdpFilterPort *ebpf.ProgramSpec `ebpf:"xdp_filter_port"`
}

// PortFilterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PortFilterMapSpecs struct {
	BlockedPorts *ebpf.MapSpec `ebpf:"blocked_ports"`
	Rb           *ebpf.MapSpec `ebpf:"rb"`
}

// PortFilterVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PortFilterVariableSpecs struct {
}

// PortFilterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadPortFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type PortFilterObjects struct {
	PortFilterPrograms
	PortFilterMaps
	PortFilterVariables
}

func (o *PortFilterObjects) Close() error {
	return _PortFilterClose(
		&o.PortFilterPrograms,
		&o.PortFilterMaps,
	)
}

// PortFilterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadPortFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type PortFilterMaps struct {
	BlockedPorts *ebpf.Map `ebpf:"blocked_ports"`
	Rb           *ebpf.Map `ebpf:"rb"`
}

func (m *PortFilterMaps) Close() error {
	return _PortFilterClose(
		m.BlockedPorts,
		m.Rb,
	)
}

// PortFilterVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadPortFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type PortFilterVariables struct {
}

// PortFilterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadPortFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type PortFilterPrograms struct {
	XdpFilterPort *ebpf.Program `ebpf:"xdp_filter_port"`
}

func (p *PortFilterPrograms) Close() error {
	return _PortFilterClose(
		p.XdpFilterPort,
	)
}

func _PortFilterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed portfilter_bpfel.o
var _PortFilterBytes []byte
